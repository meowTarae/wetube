# 
터미널에 npm i 만 입력해도 package.json - dependencies 에 있는 항목이 자동으로 설치된다.
그래서 용량 큰 node_modules 없어도 됨.


#3.0
express.listen(port값)으로 서버를 열 수 있다.

#3.1
브라우저는 나 대신 웹사이트를 요청해준다

#3.2
express().get("/") 로 request를 할 수 있다

#3.4
get으로 route해준 함수에서는 request, response를 해줘야 한다.
내가 server이고, brwoser가 중간역할, 스크린에서의 유저가 있다.
유저가 요청하면 브라우저가 서버에게 request하고
우리는(서버) 반드시 response를해줘야 한다.

#3.5
middleware 중간에있는 소프트웨어
`=. controller (= handlehome 같은 함수를 일컫음)
req와 res의 사이에 있다

사실 ctr의 argu에는 req, res, next까지 있다.
next는 다음 함수를 호출해줌
어떤 ctr이든 middleware가 될 수 있다

#3.6
express().use() -> global middleware를 만들 수 있음
middleware는 경유하는곳이므로 next를 써야함.

use 먼저 작성하고 get을 써야함.
express도 js처럼 코드 위에서부터 아래로 실행하기 때문.

#3.10
global middleware 사용법
1. 
    exp().get("/", logger, securityLogger, ..., handlehome);

2. 
    exp().use(logger);
        ...
    exp().get("/", handlehome);

#3.11
morgan - nodeJS용 request logger middleware이다.

기존
    const logger = (req, res, next) => {
        ~~~
        next();
    }

morgan
    const logger = morgan("~"); ~에는 dev, tiny 등 여러 옵션이 있다

    moragn에는 next가 포함되어있다.

