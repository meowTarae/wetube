#7.0
user authentication을 crud모델에 맞게 만들어보자.

schema에서 unique: true를 추가해 줌으로써 중복을 방지해줌.



#7.1
user가 회원가입을 해서 id와 pw를 db에 받아들일 때,
비번이 그대로 보인다면 해커에게 쉽게 털리겠지.

db에 password를 저장하면 안됨.
비번을 hashing(= 해시화)을 통해 봐도 알 수 없게끔 보안을 걸어주자.



#7.2
hash는 일방향 함수이다.
입력값 -> 출력값이 되지만, 출력값으론 입력값을 알 수 없다.
(항상 똑같이 나오는 값을 deterministic f(= 결정적 함수) 라 함)

해싱을 위해 bcrypt를 사용해보자.
(참고 - ps를 해킹할 수 있는 rainbow table를 bcrypt로 막을 수 있음)

userSchema.pre("save", async function () {
; Schema파일에서 promise를 사용.
  this.password = await bcrypt.hash(this.password, 5);
; this는, 여기서는 join.pug에서 user가 create한 계정이 db에 저장되기 전 값임.
; 숫자 5는 hash를 몇 번 할 것인지
});



#7.3
join시 항목 중복 체크.

db에 해당 item이 중복되는지 확인 할 때,

const a = User.exists({ username });
const b = User.exists({ email });
.. 처럼 중복되는 문장들은

const c = User.exists({ $or: [{ username }, { email }] });
$or를 활용해주면 좋다. 



#7.4
(http) status code(= 상태코드)

npm 실행 시
GET / 200 360.148 ms - - 에서 숫자 200이 status code임.
200은 Ok 판정이라서, 브라우저가 id,ps를 자동 저장 할까요? 같은 문구가 나오게도 해줌

7.3에서 중복 에러 발생에도, 상태 코드를 관리하지 않으면
계정 자동 저장 문구가 나타나겠지?

2xx - success line
3xx - rediretion line
4xx - error line

우리 상황엔 400(= Bad request)를 보내주면 좋을 것 같아.
404는 Not found

보내는 방법 
=> res.status(400).render("~~")



#7.5
user가 로그인 할 때, 비번이 맞는지 확인하려면~
입력 ps를 우리가 해싱해서, db에 해싱되어있는 ps 값과 같은지 확인하면 끝. 


비교를 위해 bcrypt의 compare()를 사용하자.
const match = await bcrypt.compare(user입력 값, hash된 값)

match는 T/F 값을 받음



#7.7 ~ 8
쿠키란?
 쿠키는 클라이언트(브라우저) 로컬에 저장되는 키와 값이 들어있는 작은 데이터 파일입니다.

 사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다는 특징이 있습니다.

 쿠키는 클라이언트의 상태 정보를 로컬에 저장했다가 참조합니다.

 쿠키는 사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송합니다.


세션이란?
 세션은 쿠키를 기반하고 있지만, 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 세션은 서버 측에서 관리합니다.

 서버에서는 클라이언트를 구분하기 위해 세션 ID를 부여하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지합니다.

 물론 접속 시간에 제한을 두어 일정 시간 응답이 없다면 정보가 유지되지 않게 설정이 가능 합니다.

 클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는 데 이것이 세션 ID입니다.


세션의 동작 방식

 클라이언트가 서버에 접속 시 세션 ID를 발급 받음
 
 클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고 있음
 
 클라리언트는 서버에 요청할 때, 이 쿠키의 세션 ID를 같이 서버에 전달해서 요청
 
 서버는 세션 ID를 전달 받아서 별다른 작업없이 세션 ID로 세션에 있는 클라언트 정보를 가져와서 사용
 
 클라이언트 정보를 가지고 서버 요청을 처리하여 클라이언트에게 응답
 

세션 id는 브라우저를 구분하기위해 있는 것..?

백엔드(= localhost)

브라우저와 백엔드 사이는 WIFI처럼 유지되는 연결이 없음. 요청이 끝나면 서버는 우리를 잊음 (= 이것이 stateless),
그래서 브라우저가 백엔드에 요청을 보낼 때 마다 
백엔드는 id (= 쿠키)를 같이 보내주게 됨. 
다음에 브라우저가 id와 함께 접근하면, 백엔드는 그 id를 보고 판단을 함.


세션 사용은
npm install해주고
app.get(session~~) 
위에서 아래로 코드가 진행되기에
세션 코드가 라우터들 위에 적혀야함.



#7.10
pug랑 express에서 local을 서로 공유할 수 있게끔 되어있음.
이를 활용해보자.

local이 전역함수(= global)라 세션이 적용된 라우터라면 어디서든 활용 가능.



#7.12
session id는 쿠키로 저장 but, data는 server쪽에 저장됨.
정확하게는 server의 session storage인 `MemoryStore`에 저장이 됨.

우리는 mongoDB(= server)에 세션을 저장할 수 있게 도와줄 connect-mongo를 사용할거야.

만약 서버를 재시작하더라도, 세션이 db에 저장되어있기에
이전처럼 로그아웃 되지 않음


-사용법
; server.js에
import MongoStore from "connect-mongo"

; session 열어놓은 코드로 가자.
app.use(session({
  ...
  store: MongoStore.create({ mongoUrl: "연동된 몽고db url 입력" }),
}))
; stroe를 넣어주자. 

db에 우리의 session이 연동되고, 데이타가 저장이 됨. 



#7.13
resave vs saveUninitialized

로그인 한 사람에게만 쿠키 전달, 세션 저장하는게 좋겠지.
그래서 session 코드에 
{
  resave: false
  saveUninitialized: false
} 로 설정을 해두자.

Resave 란?

모든 request마다 세션의 변경사항이 있든 없든 세션을 다시 저장한다는 뜻이며,
공식문서에서도 false를 권장하고, deprecated 상태이기에 false 고정으로 해두자.

deprecated(= 중요도가 떨어져 사용되지 않고, 곧 사라질 것을 의미함)


Uninitialized 란?

(= 초기화되지 않은): 세션이 새로 만들어지고, 수정된 적이 없을때를 뜻함.
세션이 수정되는곳은 어딜까? 
=> 컨트롤러에서 req.session.loggedIn = true 같은게 수정하는 거임 ㅇㅇ

saveUninitialized: false 이란?
=> 세션을 수정할 때만, 세션을 DB에 저장 + 쿠키에 넘겨줌.
=> 우리는 loggedIn = true를 걸었으니, 로그인 한 사람만~ 으로 해석될 수 있겠지

; 참고) 브라우저가 자동으로 인증을 해주기에 쿠키를 활용하지만, 
;      그렇지 않은 native는, 쿠키가 없기에 `JWT( JSON Web Token )`를 활용한대..



#7.14


